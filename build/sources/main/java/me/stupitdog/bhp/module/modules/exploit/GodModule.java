package me.stupitdog.bhp.module.modules.exploit;

import java.util.concurrent.TimeUnit;

import me.stupitdog.bhp.event.BhpEvent;
import me.stupitdog.bhp.event.events.PacketEvent;
import me.stupitdog.bhp.module.Category;
import me.stupitdog.bhp.module.Module;
import me.stupitdog.bhp.setting.Setting;
import me.stupitdog.bhp.util.CrystalUtil;
import me.stupitdog.bhp.util.MathUtil;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemEndCrystal;
import net.minecraft.item.ItemExpBottle;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.math.Vec3i;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class GodModule extends Module {

	private float yaw = 0.0f;
    private float pitch = 0.0f;
    private boolean rotating;
    private int rotationPacketsSpoofed;
    private int highestID = -100000;
    
    private Setting<Integer> rotations = this.register(new Setting<Integer>("Spoofs",1,1,20));
    private Setting<Boolean> rotate = this.register(new Setting<Boolean>("Rotate",false));
    private Setting<Boolean> antiIllegal = this.register(new Setting<Boolean>("AntiIllegal",false));
    private Setting<Boolean> checkPos = this.register(new Setting<Boolean>("CheckPos",false));
    private Setting<Boolean> oneDot15 = this.register(new Setting<Boolean>("1.13",false));
    private Setting<Boolean> entitycheck = this.register(new Setting<Boolean>("EntityCheck",false));
    private Setting<Integer> attacks = this.register(new Setting<Integer>("Attacks",1,1,20));
    private Setting<Integer> offset = this.register(new Setting<Integer>("Offset",1,1,20));
    private Setting<Integer> delay = this.register(new Setting<Integer>("Delay",1,1,20));
	
	public GodModule() {
		super("GodModule","",Category.EXPLOITS);
	}
	
	@SubscribeEvent
	public void listener(PacketEvent.Send event) {
		CPacketPlayerTryUseItemOnBlock packet;
        if (event.getEra() == BhpEvent.Era.PRE && event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock) {
            packet = (CPacketPlayerTryUseItemOnBlock)event.getPacket();
            if (GodModule.mc.player.getHeldItem(packet.getHand()).getItem() instanceof ItemEndCrystal) {
                if (this.checkPos.getValue() && !CrystalUtil.canPlaceCrystal(packet.getPos(), this.entitycheck.getValue(), this.oneDot15.getValue()) || this.checkPlayers()) {
                    return;
                }
                this.updateEntityID();
                for (int i = 1 - this.offset.getValue(); i <= this.attacks.getValue(); ++i) {
                    this.attackID(packet.getPos(), this.highestID + i);
                }
            }
        }
        if (event.getEra() == BhpEvent.Era.PRE && this.rotating && this.rotate.getValue() && event.getPacket() instanceof CPacketPlayer) {
            CPacketPlayer packet2 = (CPacketPlayer) event.getPacket();
            packet2.yaw = this.yaw;
            packet2.pitch = this.pitch;
            ++this.rotationPacketsSpoofed;
            if (this.rotationPacketsSpoofed >= this.rotations.getValue()) {
                this.rotating = false;
                this.rotationPacketsSpoofed = 0;
            }
        }
	}
	
	private void attackID(BlockPos pos, int id) {
        Entity entity = GodModule.mc.world.getEntityByID(id);
        if (entity == null || entity instanceof EntityEnderCrystal) {
            AttackThread attackThread = new AttackThread(id, pos, this.delay.getValue(), this);
            if (this.delay.getValue() == 0) {
                attackThread.run();
            } else {
                attackThread.start();
            }
        }
    }
	
	private void checkID(int id) {
        if (id > this.highestID) {
            this.highestID = id;
        }
    }

    public void updateEntityID() {
        for (Entity entity : GodModule.mc.world.loadedEntityList) {
            if (entity.getEntityId() <= this.highestID) continue;
            this.highestID = entity.getEntityId();
        }
    }

    private boolean checkPlayers() {
        if (this.antiIllegal.getValue()) {
            for (EntityPlayer player : GodModule.mc.world.playerEntities) {
                if (!this.checkItem(player.getHeldItemMainhand()) && !this.checkItem(player.getHeldItemOffhand())) continue;
                return true;
            }
        }
        return false;
    }

    private boolean checkItem(ItemStack stack) {
        return stack.getItem() instanceof ItemBow || stack.getItem() instanceof ItemExpBottle || stack.getItem() == Items.STRING;
    }

    public void rotateTo(BlockPos pos) {
        float[] angle = MathUtil.calcAngle(GodModule.mc.player.getPositionEyes(mc.getRenderPartialTicks()), new Vec3d((Vec3i)pos));
        this.yaw = angle[0];
        this.pitch = angle[1];
        this.rotating = true;
    }

    private void resetFields() {
        this.rotating = false;
        this.highestID = -1000000;
    }

    public static class AttackThread
            extends Thread {
        private final BlockPos pos;
        private final int id;
        private final int delay;
        private final GodModule GodModule;

        public AttackThread(int idIn, BlockPos posIn, int delayIn, GodModule GodModuleIn) {
            this.id = idIn;
            this.pos = posIn;
            this.delay = delayIn;
            this.GodModule = GodModuleIn;
        }

        @Override
        public void run() {
            try {
                if (this.delay != 0) {
                    TimeUnit.MILLISECONDS.sleep(this.delay);
                }
                mc.addScheduledTask(() -> {
                    CPacketUseEntity attack = new CPacketUseEntity();
                    attack.entityId = this.id;
                    attack.action = CPacketUseEntity.Action.ATTACK;
                    this.GodModule.rotateTo(this.pos.up());
                    mc.player.connection.sendPacket((Packet)attack);
                    mc.player.connection.sendPacket((Packet)new CPacketAnimation(EnumHand.MAIN_HAND));
                });
            }
            catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
